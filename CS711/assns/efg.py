# -*- coding: utf-8 -*-
"""EFG.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YRnzdFNuDJKXZFi9GoI4MxbgZ9V_kIbj
"""

with open ('/test1.efg', 'r') as f:
  for x in f:
    print (x)

class EFG_general:
  
  def __init__(self, line):
    nline = line.split(' ')
    self.player_name = ''
    self.player = ''
    self.info_set = ''
    self.actions = []
    self.outcome_num = ''
    self.util = []
    self.node_type = nline[0]
    if nline[0] == 'p':
      self.player_name = nline[1][1:-1]
      self.player = nline[2]
      self.info_set = int(nline[3])
      self.actions = []
      i = 6
      while (nline[i] != '}'):
        self.actions.append(nline[i][1:-1])
        i += 1
    else:
      self.outcome_num = int(nline[2])
      self.util = []
      temp = nline[5:-1]
      tempstr = ''.join([str(elem) for elem in temp]).split(',')
      for elem in tempstr:
        self.util.append(int(elem))

class EFG_first:

  def __init__(self, line):
    i = 9
    self.game_name = ''
    while (line[i] != '"'):
      self.game_name += line[i]
      i += 1
    nline = line.split(" ")
    print ("nline:", nline)
    self.player_names = []
    i = 6
    while (nline[i] != '}\n'):
      self.player_names.append(nline[i][1:-1])
      i += 1

# Testing

# with open ('/test1.efg', 'r') as f:    
#   obj1 = EFG_first(f.readline())
#   print (obj1.game_name, obj1.player_names)
#   f.readline()
#   obj2 = EFG_general(f.readline())
#   print(obj2.player_name,
#     obj2.player,
#     obj2.info_set,
#     obj2.action,
#     obj2.outcome_num,
#     obj2.util,
#     obj2.node_type)
#   f.readline()
#   obj3 = EFG_general(f.readline())
#   print(obj3.player_name,
#     obj3.player,
#     obj3.info_set,
#     obj3.action,
#     obj3.outcome_num,
#     obj3.util,
#     obj3.node_type)

class Node(EFG_general):

  def __init__(self, line, prev_action = None):
    self.prev_action = prev_action
    self.children = []
    EFG_general.__init__(self, line)

  def append_child(self, child):
    self.children.append(child)

def construct_tree(line_index, file_arr, curr = None):
  if curr == None:
    curr = Node(file_arr[line_index])
  i = line_index
  print (i)
  for action in curr.actions:
    child = Node(file_arr[i+1], action)
    print (child.util)
    curr.append_child(child)
    if (child.node_type == 'p'):
      (i, _) = construct_tree(i+1, file_arr, child)
    i += 1
  print (curr.children)
  return (i-1, curr)

file_arr = []
with open ('/test1.efg', 'r') as f:
  for x in f:
    file_arr.append(x)
  
print (file_arr[2])
(_, root) = construct_tree(2, file_arr)